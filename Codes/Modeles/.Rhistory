knitr::opts_chunk$set(echo = TRUE)
#install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ROCR")
library(dplyr)
library(ggplot2)
library(ROCR)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ROCR")
library(dplyr)
library(ggplot2)
library(ROCR)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
# Remplacez par le chemin d'accès si nécessaire
data <- read.csv("/mnt/data/farms_train.csv")
# Remplacez par le chemin d'accès si nécessaire
data <- read.csv("data/farms_train.csv")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ROCR")
library(dplyr)
library(ggplot2)
library(ROCR)
# Remplacez par le chemin d'accès si nécessaire
data <- read.csv("data/farms_train.csv")
#("dplyr")
#install.packages("ggplot2")
#install.packages("ROCR")
library(dplyr)
library(ggplot2)
library(ROCR)
# Remplacez par le chemin d'accès si nécessaire
data <- read.csv("../data/farms_train.csv")
# Remplacez par le chemin d'accès si nécessaire
data <- read.csv("../data/farms_train.csv", sep = ";", header = TRUE)
dim(data)
head(data)
glimpse(data)
# Convertir `diff` en facteur (variable cible) pour classification binaire
data <- mutate(data, diff = as.factor(diff))
#("dplyr")
#install.packages("ggplot2")
#install.packages("ROCR")
if (!require("dplyr")) install.packages("dplyr")
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(ROCR)
#("dplyr")
#install.packages("ggplot2")
#install.packages("ROCR")
library(dplyr)
library(ggplot2)
library(ROCR)
# Convertir `diff` en facteur (variable cible) pour classification binaire
data <- mutate(data, diff = as.factor(diff))
# Convertir `diff` en facteur (variable cible) pour classification binaire
data <- data %>% mutate(diff = as.factor(diff))
str(data$diff)
data$diff <- as.vector(data$diff)
data <- data %>% mutate(diff = as.factor(diff))
# Convertir `diff` en facteur (variable cible) pour classification binaire
data <- data %>% mutate(DIFF = as.factor(DIFF))
# Transformer d'autres colonnes si nécessaire en tant que variables catégorielles
glimpse(data)
ggplot(data, aes(x = diff, y = var1, fill = diff)) + geom_boxplot() + labs(title = "Boxplot de Var1 par Diff")
ggplot(data, aes(x = DIFF, y = R2, fill = DIFF)) + geom_boxplot() + labs(title = "Boxplot de Var1 par DIFF")
ggplot(data, aes(x = DIFF, y = R7, fill = DIFF)) + geom_boxplot() + labs(title = "Boxplot de Var2 par DIFF")
fit_logistic <- glm(diff ~ var1 + var2 + var3 + var4, family = "binomial", data = data)
fit_logistic <- glm(DIFF ~ R2 + R7 + R8 + R17+ R22 +R32, family = "binomial", data = data)
summary(fit_logistic)
data_clean <- na.omit(data)
fit_logistic <- glm(DIFF ~ R2 + R7 + R8 + R17+ R22 +R32, family = "binomial", data = data)
summary(fit_logistic)
install.packages("xgboost")
setwd("~/Master/Semestre1/Modèle regression linéaire/Lebre")
knitr::opts_chunk$set(echo = TRUE)
load("../Data/Prostate.rda")
knitr::opts_chunk$set(echo = TRUE)
load("../Data/Prostate.rda")
load("./Prostate.rda")
dim(Prostate)
# Brève analyse descriptive des données
A compléter ...
data <- load("./Prostate.rda")
dim(Prostate)
# Brève analyse descriptive des données
summary(data)
# Matrice des variables explicatives
...
# Brève analyse descriptive des données
summary(data)
# Matrice des variables explicatives
# Résidus / Points leviers
# Brève analyse descriptive des données
glimpse(prostate)
# Brève analyse descriptive des données
library (dplyr)
glimpse(prostate)
# Brève analyse descriptive des données
library (dplyr)
glimpse(Prostate)
# Matrice des variables explicatives
# Résidus / Points leviers
# Brève analyse descriptive des données
library (dplyr)
glimpse(Prostate)
# Matrice des variables explicatives
library(GGally)
# Brève analyse descriptive des données
library (dplyr)
glimpse(Prostate)
# Matrice des variables explicatives
library(GGally)
setwd("C:/wamp64/www/TER-2024-2025-Creation-et-analyse-d-une-base-d-images-des-habitats-naturels-du-globe/Codes/Modeles")
knitr::opts_chunk$set(echo = TRUE)
birds_data <- read.csv("../../Donnees/birdS_HOG_features_database.csv")
#climate_data <- read.csv("climate_features.csv")
head(data)
head(birds_data)
data_scaled <- scale(data[, -1])
data_scaled <- scale(birds_data[, -1])
fviz_nbclust(data_scaled, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2) +
labs(title = "Détermination du nombre optimal de clusters - Méthode du coude")
# Charger les bibliothèques
library(dplyr)
library(ggplot2)
library(cluster)
library(factoextra)
fviz_nbclust(data_scaled, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2) +
labs(title = "Détermination du nombre optimal de clusters - Méthode du coude")
fviz_nbclust(data_scaled, kmeans, method = "silhouette") +
labs(title = "Score de silhouette pour le choix du nombre de clusters")
set.seed(123)  # Pour la reproductibilité
k_optimal <- 2  # Remplacez par le nombre optimal déterminé précédemment
kmeans_result <- kmeans(data_scaled, centers = k_optimal, nstart = 25)
data$cluster <- as.factor(kmeans_result$cluster)
set.seed(123)  # Pour la reproductibilité
k_optimal <- 2  # Remplacez par le nombre optimal déterminé précédemment
kmeans_result <- kmeans(data_scaled, centers = k_optimal, nstart = 25)
data$cluster <- as.factor(kmeans_result$cluster)
intra_cluster_inertia <- kmeans_result$tot.withinss
print(paste("Inertie intra-cluster totale :", round(intra_cluster_inertia, 2)))
silhouette_score <- silhouette(kmeans_result$cluster, dist(data_scaled))
avg_silhouette <- mean(silhouette_score[, 3])
print(paste("Score de silhouette moyen :", round(avg_silhouette, 2)))
pca_result <- prcomp(data_scaled)
data_pca <- as.data.frame(pca_result$x[, 1:2])
data_pca$cluster <- data$cluster
ggplot(data_pca, aes(x = PC1, y = PC2, color = cluster)) +
geom_point(size = 2) +
labs(title = "Visualisation des clusters en 2D avec PCA",
x = "Composante Principale 1", y = "Composante Principale 2") +
theme_minimal()
